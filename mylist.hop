! =================================================== !
! Scripts auxiliares para a realização dos exercicios !
! =================================================== !

! operates numerical ranges up to 140000 (safety limit).
infix .. : 4;
.. : num # num -> list num;
n..m <= if n > m 
        then [] 
        else if m > 140000
             then error ("Final limit allowed: 140000")
             else n :: (succ n .. m);

! maximum allowed limit for infinity = 140000.
from : num -> list num;
from (n) <= if n > 140000
            then error ("Maximum limit to infinity: 140000")
            else n .. 140000;
pi : num;
pi <= acos(0)*2;

pred : num -> num;
pred 0     <= 0;
pred (n+1) <= n;

max : alpha # alpha -> alpha;
max (x, y) <= if x > y then x else y;

min : alpha # alpha -> alpha;
min (x, y) <= if x < y then x else y;

signum : num -> num;
signum n <= if n < 0 then 0-1 else 
               if n = 0 then 0 else 1;

const : alpha -> beta -> alpha;
const x _ <= x;

index : num # list num -> num;
index (_, []) <= error "Index out of range!";
index (0, x :: xs) <= x;
index (n, x :: xs) <= index (n - 1, xs);

null : list alpha -> truval;
null []     <= true;
null (_::_) <= false;

head : list alpha -> alpha;
head []       <= error ("Empty list!");
head (x :: _) <= x;

tail : list alpha -> list alpha;
tail []        <= error ("Empty list!");
tail (_ :: xs) <= xs;

drop : num # list alpha -> list alpha;
drop (0, xs)      <= xs;
drop (n, [])      <= [];
drop (n, x :: xs) <= drop (n - 1, xs);

take : num # list alpha -> list alpha;
take (n, [])      <= [];
take (0, xs)      <= [];
take (n, x :: xs) <= x :: take (n - 1, xs);

minimum : list alpha -> alpha;
minimum []             <= error ("Lista vazia!");
minimum ([x])          <= x;
minimum (x :: y :: xs) <= if x < y 
                          then minimum (x :: xs) 
                          else minimum (y :: xs);

maximum : list alpha -> alpha;
maximum []             <= error ("Lista vazia!");
maximum ([x])          <= x;
maximum (x :: y :: xs) <= if x > y 
                          then maximum (x :: xs) 
                          else maximum (y :: xs);

last : list alpha -> alpha;
last ([x])     <= x;
last (x :: xs) <= last xs;

init : list alpha -> list alpha;
init ([x])     <= [];
init (x :: xs) <= x :: init xs;

reverseAux : list alpha # list alpha -> list alpha;
reverseAux([], ys)    <= ys;
reverseAux(x::xs, ys) <= reverseAux(xs, x::ys);

reverse : list alpha -> list alpha;
reverse xs <= reverseAux(xs, []);

length : list alpha -> num;
length []        <= 0;
length (x :: xs) <= 1 + length xs;

all : (alpha -> truval) # list alpha -> truval;
all (_, [])      <= true;
all (p, x :: xs) <= p x and all (p, xs);

any : (alpha -> truval) # list alpha -> truval;
any (_, [])      <= false;
any (p, x :: xs) <= p x or any (p, xs); 

takeWhile : (alpha -> truval) # list alpha -> list alpha;
takeWhile (_, [])      <= [];
takeWhile (p, x :: xs) <= if p x 
                          then x :: takeWhile (p, xs) 
                          else [];


dropWhile : (alpha -> truval) # list alpha -> list alpha;
dropWhile (_, [])      <= [];
dropWhile (p, x :: xs) <= if p x 
                          then dropWhile (p, xs) 
                          else x :: xs;

gcd : num # num -> num;
gcd (0, n) <= n;
gcd (m, n) <= gcd (floor n mod floor m, m);

sum : list num -> num;
sum []        <= 0;
sum (x :: xs) <= x + sum xs;

range : num # num # num -> list num;
range (i, f, p) <= if i > f 
                   then [] 
                   else i :: range (i + p, f, p);

lcm : num # num -> num;
lcm (_, 0) <= 0;
lcm (0, _) <= 0;
lcm (x, y) <= x * y div gcd (x, y);

splitAt : num # list alpha -> list alpha # list alpha;
splitAt (n, xs) <= (take (n, xs), drop (n, xs));

splitAt' : num # list alpha -> list alpha # list alpha;
splitAt' (0, ys)      <= ([], ys);
splitAt' (_, [])      <= ([], []);
splitAt' (n, y :: ys) <= if n < 0 
                         then ([], y :: ys) 
                         else (y :: a, b) 
                         where (a, b) == splitAt' (n - 1, ys);

elem : alpha # list alpha -> truval;
elem (x, [])      <= false;
elem (x, y :: ys) <= x = y or elem (x, ys);

filter : (alpha -> truval) # list alpha -> list alpha;
filter (_, [])      <= [];
filter (p, x :: xs) <= if p x 
                       then x :: filter (p, xs) 
                       else filter (p, xs);

map : list alpha # (alpha -> beta) -> list beta;
map ([], _)      <= [];
map (x :: xs, f) <= f x :: map (xs, f);

reduce : list alpha # (alpha # alpha -> alpha) # alpha -> alpha;
reduce ([], f, n)      <= n;
reduce (x :: xs, f, n) <= f (x, reduce (xs, f, n));

comp : list alpha # (alpha -> truval) -> list alpha;
comp ([], f) <= [];
comp (x :: xs, f) <= if f x 
                     then x :: comp (xs, f)
                     else comp (xs, f);

even : num -> truval;
even n <= n mod 2 = 0;

odd : num -> truval;
odd n <= n mod 2 /= 0;

foldr : (alpha # alpha -> alpha) # alpha # list alpha -> alpha;
foldr (f, n, [])      <= n;
foldr (f, n, x :: xs) <= f (x, foldr (f, n, xs));

foldl : (alpha # alpha -> alpha) # alpha # list alpha -> alpha;
foldl (f, n, [])      <= n;
foldl (f, n, x :: xs) <= foldl (f, f (n, x), xs);

product : list num -> num;
product xs <= foldl ((*), 1, xs);

zip : list alpha # list beta -> list (alpha # beta);
zip ([], _)            <= [];
zip (_, [])            <= [];
zip (x :: xs, y :: ys) <= (x, y) :: zip (xs, ys);

getPos : alpha # list alpha -> num;
getPos (_, [])      <= error ("Element does not exist in the list!");
getPos (n, x :: xs) <= if n = x 
                       then length xs 
                       else getPos (n, xs);

find : alpha # list alpha -> num;
find (_, [])      <= error ("Empty list!");
find (n, x :: xs) <= getPos (n, reverse (x :: xs));

listPow : num # list num -> list num;
listPow (_, [])      <= [];
listPow (n, x :: xs) <= pow (x, n) :: listPow (n, xs);

insert : alpha # list alpha -> list alpha;
insert (n, [])      <= [n];
insert (n, x :: xs) <= if n =< x 
                       then n :: x :: xs 
                       else x :: insert (n, xs);

sort : list alpha -> list alpha;
sort []        <= [];
sort (x :: xs) <= insert (x, sort xs);

member : alpha # list alpha -> truval;
member <= elem;

unique : list alpha -> list alpha;
unique []        <= [];
unique (x :: xs) <= if member (x, xs) 
                    then unique xs 
                    else x :: unique xs;

quotRem : num # num -> (num # num);
quotRem (a,b) <= (a div b, a mod b);

fst : (alpha # beta) -> alpha;
fst (x,_) <= x;

snd : (alpha # beta) -> beta;
snd (_,y) <= y;

isUpper : char -> truval;
isUpper c <= 'A' =< c and c =< 'Z';

isLower : char -> truval;
isLower c <= 'a' =< c and c =< 'z';

isAlpha : char -> truval;
isAlpha c <= isUpper c or isLower c;

isDigit : char -> truval;
isDigit c <= '0' =< c and c =< '9';

isHexDigit : char -> truval;
isHexDigit c <= isDigit c or 'a' =< c and c =< 'f' or 'A' =< c and c =< 'F';

isOctDigit : char -> truval;
isOctDigit c <= isDigit c or '0' =< c and c =< '7';

isAlphaNum : char -> truval;
isAlphaNum c <= isAlpha c or isDigit c;

isSpace : char -> truval;
isSpace c <= c = ' ' or c = '\t' or c = '\n';

isGraph : char -> truval;
isGraph c <= ' ' =< c and c =< '~';

isPunct : char -> truval;
isPunct c <= isGraph c and c /= ' ' and not (isAlphaNum c);

isAscii : char -> truval;
isAscii c <= ord c < 128;

isControl : char -> truval;
isControl c <= isAscii c and not (isGraph c);

toLower : char -> char;
toLower c <= if isUpper c then chr (ord c + 32) else c;

toUpper : char -> char;
toUpper c <= if isLower c then chr (ord c - 32) else c;

digitToInt : char -> num;
digitToInt x <= ord x - 48;

digitToChar : num -> char;
digitToChar x <= chr (x + 48);

charToInt : char -> num;
charToInt x <= ord (x);

infix and1 : 2;
infix and2 : 2;




